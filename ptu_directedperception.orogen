name "ptu_directedperception"

using_library "ptu_directedperception"
using_task_library "iodrivers_base"
import_types_from "base"

task_context "Task", subclasses: "iodrivers_base::Task" do
    doc <<-EOD
Driver component for a Directed Perception PTU. The frame convention is such that pan is 
around the z axis and tilt is around the y axis with x axis forward. Which means that a
positive tilt points it down and the negative tilt points it upwards. 
One can use either the set_orientation port or the pan/tilt ports. The set_orientation 
port has priority and the other input ports are not checked if data coming on the orientation 
port.
EOD
   
    property("pan_speed", "/double", 0).
        doc("desired speed of pan axis in rad/s (<=0: not set)")

    property("tilt_speed", "/double", 0).
        doc("desired speed of tilt axis in rad/s (<=0: not set)")

    # Transformer:
    # Base frame and head frame share the same position, which is the intersection point
    # between vertical axis and horizontal axis. The port orientation_samples put out
    # the rotation between the frames.

    property("base_frame", "/std/string", "ptu_base").
        doc("name for the basis frame of the ptu, fixed to the platform")

    property("head_frame", "/std/string", "ptu_head").
        doc("name for the head frame of the ptu, the movable part")
   

    operation("ptFromRBS").
        returns("/base/Vector2d").
        argument("rbs_in","/base/samples/RigidBodyState").
        doc("compute pan and tilt form RigidBodyState. pt=vector2d(pan,tilt)")

    operation("rbsFromPT").
        returns("/base/samples/RigidBodyState").
        argument("pt_in","/base/Vector2d").
        doc("compute RigidBodyState from pan and tilt. PT=vector2d(pan,tilt)")

    operation("rbsFromPanTilt").
        argument("pan","double").
        argument("tilt","double").
        returns("/base/samples/RigidBodyState")

    input_port "set_orientation", "base/samples/RigidBodyState"

    input_port("pan_set", "/double").doc("pan angle in radian")
    input_port("tilt_set", "/double").doc("tilt angle in radian")

    output_port("orientation_samples","base/samples/RigidBodyState").
        doc("the transformation from base to head")

    output_port("pan_angle","/double")
    output_port("tilt_angle","/double")

    periodic(0.01)
end
