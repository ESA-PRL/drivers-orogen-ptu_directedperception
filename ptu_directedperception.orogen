name "ptu_directedperception"

using_library "ptu_directedperception"
using_task_library "iodrivers_base"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
# import_types_from "ptu_directedperceptionType.hpp"

# If the component/deployments use data types that are defined in other oroGen
# projects, these projects should be imported there as well.
# import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the ptu_directedperception namespace.
task_context "Task" do
   subclasses "iodrivers_base::Task"
   
   # A configuration property (here, a std::string). Its value can be retrieved
   # in the C++ code with # _config_value.get() and _config_value.set(new_value).
   property "uri", "/std/string", "localhost"

   # An input port, i.e. an object from which the component gets data from
   # other components' outputs
   #
   # Data can be retrieved using _input.read(value), which returns true if data
   # was available, and false otherwise. _input.connected() returns if this
   # input is connected to an output or not.
   input_port "input", "/std/vector<int>"

   # An output port, i.e. an object to which the component pushes data so that
   # it is transmitted to other components' inputs
   #
   # Data can be written using _output.write(value). _output.connected() returns
   # if this output is connected to an input or not.
   output_port "output", "/std/vector<int>"

   # If you want that component's updateHook() to be executed when the "input"
   # port gets data, uncomment this
   # port_driven "input"
end
